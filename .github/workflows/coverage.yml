name: Coverage

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage-x64:
    name: Coverage (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure (x64)
        run: cmake -S . -B build/x64 -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_MSVC_DEBUG_INFORMATION_FORMAT=ProgramDatabase -DCMAKE_CXX_FLAGS_RELEASE="/Zi" -DCMAKE_EXE_LINKER_FLAGS_RELEASE="/DEBUG"

      - name: Build (x64)
        run: cmake --build build/x64 --config Release -- /m

      - name: Install OpenCppCoverage
        shell: pwsh
        run: choco install OpenCppCoverage -y

      - name: Generate coverage (Cobertura) and badge
        shell: pwsh
        run: |
          $cov = "coverage.xml"
          $occ = "C:\\Program Files\\OpenCppCoverage\\OpenCppCoverage.exe"
          $tests = Get-ChildItem -Path (Join-Path $PWD "build/x64/Release") -Filter "*test.exe" -ErrorAction SilentlyContinue
          if (-not $tests) { Write-Host "No test executables found for coverage"; exit 0 }
          $moduleArgs = @()
          foreach ($t in $tests) { $moduleArgs += @('--modules', $t.FullName) }
          # Create a runner script to execute all tests without ctest dependency
          $runner = "run_tests.ps1"
          "`$ErrorActionPreference='Stop'" | Out-File -FilePath $runner -Encoding UTF8
          foreach ($t in $tests) { "& `"$($t.FullName)`"" | Out-File -FilePath $runner -Encoding UTF8 -Append }
          & "$occ" --export_type "cobertura:$cov" --quiet --cover_children @moduleArgs --sources "$env:GITHUB_WORKSPACE" -- powershell -NoProfile -ExecutionPolicy Bypass -File $runner
          if (!(Test-Path $cov)) { Write-Host "Coverage file not created"; exit 0 }
          python -m pip install --upgrade pip
          python -m pip install genbadge[all]
          New-Item -Type Directory badges -ErrorAction SilentlyContinue | Out-Null
          # Resolve genbadge console script (Windows places it under Python Scripts)
          $scriptsDir = python -c "import sysconfig; print(sysconfig.get_path('scripts'))"
          $gen = Join-Path $scriptsDir "genbadge.exe"
          if (Test-Path $gen) {
            & "$gen" coverage -i $cov -o badges/coverage.svg
          } else {
            # Fallback to PATH
            genbadge coverage -i $cov -o badges/coverage.svg
          }

      - name: Upload coverage artifacts
        if: ${{ hashFiles('coverage.xml') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-x64
          path: |
            coverage.xml
            badges/coverage.svg

      - name: Commit coverage badge and XML
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && hashFiles('badges/coverage.svg') != '' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update coverage badge and report"
          branch: main
          file_pattern: badges/coverage.svg coverage.xml
