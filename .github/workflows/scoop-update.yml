name: Scoop Update

on:
  # Run only after the Rolling Release workflow completes (and succeeds)
  workflow_run:
    workflows: ["Rolling Release"]
    types: [completed]
  # Allow manual runs if needed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    # Gate on success of Rolling Release when triggered by workflow_run
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Ensure we push changes to the default branch
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch latest release metadata
        id: meta
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSfL -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GH_TOKEN}" \
            https://api.github.com/repos/${REPO}/releases/latest > latest.json
          TAG=$(jq -r .tag_name latest.json)
          NAME=$(jq -r .name latest.json)
          X64_URL=$(jq -r '.assets[] | select(.name=="altrightclick-windows-x64.zip").browser_download_url' latest.json)
          ARM64_URL=$(jq -r '.assets[] | select(.name=="altrightclick-windows-arm64.zip").browser_download_url' latest.json)
          X64_SHA_URL=$(jq -r '.assets[] | select(.name=="altrightclick-windows-x64.zip.sha256").browser_download_url' latest.json)
          ARM64_SHA_URL=$(jq -r '.assets[] | select(.name=="altrightclick-windows-arm64.zip.sha256").browser_download_url' latest.json)
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then echo "No latest release found" >&2; cat latest.json; exit 1; fi
          if [ -z "$X64_URL" ] || [ "$X64_URL" = "null" ]; then echo "x64 asset URL missing in latest release" >&2; exit 1; fi
          if [ -z "$ARM64_URL" ] || [ "$ARM64_URL" = "null" ]; then echo "arm64 asset URL missing in latest release" >&2; exit 1; fi
          if [ -z "$X64_SHA_URL" ] || [ "$X64_SHA_URL" = "null" ]; then echo "x64 sha256 asset URL missing in latest release" >&2; exit 1; fi
          if [ -z "$ARM64_SHA_URL" ] || [ "$ARM64_SHA_URL" = "null" ]; then echo "arm64 sha256 asset URL missing in latest release" >&2; exit 1; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "x64=$X64_URL" >> "$GITHUB_OUTPUT"
          echo "arm64=$ARM64_URL" >> "$GITHUB_OUTPUT"
          echo "x64sha=$X64_SHA_URL" >> "$GITHUB_OUTPUT"
          echo "arm64sha=$ARM64_SHA_URL" >> "$GITHUB_OUTPUT"

      - name: Download checksums
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          X64_SHA_URL="${{ steps.meta.outputs.x64sha }}"
          ARM64_SHA_URL="${{ steps.meta.outputs.arm64sha }}"
          if [ -z "$X64_SHA_URL" ]; then echo "Empty x64 sha256 URL" >&2; exit 1; fi
          if [ -z "$ARM64_SHA_URL" ]; then echo "Empty arm64 sha256 URL" >&2; exit 1; fi
          curl -sSfL -H "Authorization: Bearer ${GH_TOKEN}" "$X64_SHA_URL" -o x64.sha256
          curl -sSfL -H "Authorization: Bearer ${GH_TOKEN}" "$ARM64_SHA_URL" -o arm64.sha256
          X64_HASH=$(cut -d ' ' -f1 x64.sha256)
          ARM64_HASH=$(cut -d ' ' -f1 arm64.sha256)
          echo "X64_HASH=$X64_HASH" >> $GITHUB_ENV
          echo "ARM64_HASH=$ARM64_HASH" >> $GITHUB_ENV

      - name: Update manifest
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          NAME: ${{ steps.meta.outputs.name }}
        run: |
          VER_NO_V=${NAME#v}
          jq \
            --arg ver "$VER_NO_V" \
            --arg x64 "${{ steps.meta.outputs.x64 }}" \
            --arg a64 "${{ steps.meta.outputs.arm64 }}" \
            --arg xh "$X64_HASH" \
            --arg ah "$ARM64_HASH" \
            '.version=$ver | .architecture["64bit"].url=$x64 | .architecture["64bit"].hash=$xh | .architecture.arm64.url=$a64 | .architecture.arm64.hash=$ah' \
            scoop/altrightclick.json > scoop/altrightclick.json.tmp
          mv scoop/altrightclick.json.tmp scoop/altrightclick.json

      - name: Commit and push changes directly
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true
          git fetch origin main
          # Ensure local main tracks remote
          git checkout -B main origin/main
          # Stage only if there are changes
          if git diff --quiet -- scoop/altrightclick.json; then
            echo "No manifest changes to commit"
            exit 0
          fi
          git add scoop/altrightclick.json
          git commit -m "scoop: sync manifest to latest release"
          # Try pushing; on failure, rebase and retry up to 3 times
          for i in 1 2 3; do
            if git push origin HEAD:main; then
              echo "Push succeeded"
              exit 0
            fi
            echo "Push failed, attempting rebase retry ($i)" >&2
            git fetch origin main
            if ! git pull --rebase origin main; then
              git rebase --abort || true
              echo "Rebase failed; stopping" >&2
              exit 1
            fi
          done
          echo "Push failed after retries" >&2
          exit 1
